{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useReducer } from \"react\";\nimport { Form, Button } from 'react-bootstrap';\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport * as emailjs from 'emailjs-com';\nconst initialState = {\n  name: '',\n  email: '',\n  subject: '',\n  message: ''\n};\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'NAME':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        name: action.value\n      });\n\n    case 'EMAIL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        email: action.value\n      });\n\n    case 'SUBJECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        subject: action.value\n      });\n\n    case 'MESSAGE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        message: action.value\n      });\n\n    default:\n      throw new Error();\n  }\n};\n\nconst ContactForm = () => {\n  const {\n    0: formState,\n    1: dispatch\n  } = useReducer(formReducer, initialState);\n  const {\n    0: showFormErr,\n    1: setShowFormErr\n  } = useState(false);\n  const {\n    0: formSubmitted,\n    1: setFormSubmitted\n  } = useState({\n    title: '',\n    paragraph: ''\n  });\n  const {\n    0: showCaptcha,\n    1: setShowCaptcha\n  } = useState(false);\n  const {\n    name,\n    email,\n    subject,\n    message\n  } = formState;\n\n  const submitFormAndShowCaptcha = e => {\n    e.preventDefault();\n    setShowCaptcha(true);\n  };\n\n  const sendEmail = captchaValue => {\n    if (name === '' || email === '' || subject === '' || message === '') {\n      setShowFormErr(true);\n      return;\n    }\n\n    const params = {\n      from_name: email,\n      to_name: 'Niall',\n      subject: subject,\n      message: message,\n      'g-recaptcha-response': captchaValue\n    };\n    setFormSubmitted({\n      title: 'Sending message...',\n      paragraph: ''\n    });\n    emailjs.send('service_my3snd5', 'template_4rj8let', params, 'user_gn7hNUi1KB9jeyD2T016F').then(({\n      status\n    }) => {\n      if (status === 200) {\n        setFormSubmitted({\n          title: 'Your message has been sent',\n          paragraph: \"I'll get back to you as soon as possible\"\n        });\n      } else {\n        setFormSubmitted({\n          title: \"There was a problem sending your email', paragraph: 'Please try again later or email me directly at mckenna.niall@gmail.com or reach out on LinkedIn\"\n        });\n      }\n    }, err => {\n      // eslint-disable-next-line no-console\n      console.log(err);\n      setFormSubmitted({\n        title: 'Error sending message',\n        paragraph: 'Please try again later or email me directly at mckenna.niall@gmail.com or reach out on LinkedIn'\n      });\n    });\n  };\n\n  return formSubmitted.title === '' ? /*#__PURE__*/_jsx(\"div\", {\n    children: !showCaptcha ? /*#__PURE__*/_jsxs(Form, {\n      id: \"contact-form\",\n      onSubmit: submitFormAndShowCaptcha,\n      children: [/*#__PURE__*/_jsx(Form.Group, {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsx(Form.Control, {\n          required: true,\n          type: \"text\",\n          name: \"name\",\n          className: \"form-control\",\n          placeholder: \"Name\",\n          onChange: e => dispatch({\n            type: 'NAME',\n            value: e.target.value\n          }),\n          value: name\n        })\n      }), /*#__PURE__*/_jsx(Form.Group, {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsx(Form.Control, {\n          required: true,\n          type: \"email\",\n          name: \"email\",\n          className: \"form-control\",\n          \"aria-describedby\": \"emailHelp\",\n          placeholder: \"Email\",\n          onChange: e => dispatch({\n            type: 'EMAIL',\n            value: e.target.value\n          }),\n          value: email\n        })\n      }), /*#__PURE__*/_jsx(Form.Group, {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsx(Form.Control, {\n          required: true,\n          type: \"text\",\n          name: \"subject\",\n          className: \"form-control\",\n          placeholder: \"Subject\",\n          onChange: e => dispatch({\n            type: 'SUBJECT',\n            value: e.target.value\n          }),\n          value: subject\n        })\n      }), /*#__PURE__*/_jsx(Form.Group, {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsx(Form.Control, {\n          required: true,\n          as: \"textarea\",\n          name: \"message\",\n          className: \"form-control\",\n          rows: 5,\n          placeholder: \"Message\",\n          onChange: e => dispatch({\n            type: 'MESSAGE',\n            value: e.target.value\n          }),\n          value: message\n        })\n      }), /*#__PURE__*/_jsx(Form.Group, {\n        className: \"form-group\"\n      }), showFormErr && /*#__PURE__*/_jsx(\"p\", {\n        children: \"Please complete all fields to send a message\"\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Send Message\"\n      })]\n    }) : /*#__PURE__*/_jsx(ReCAPTCHA, {\n      sitekey: \"6Lfng2caAAAAAPH3mUIJVnJRqA7maIMWOdsTz0t2\",\n      onChange: sendEmail\n    })\n  }) : /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"h3\", {\n      children: formSubmitted.title\n    }), /*#__PURE__*/_jsx(\"p\", {\n      children: formSubmitted.paragraph\n    })]\n  });\n};\n\nexport { ContactForm as default };","map":null,"metadata":{},"sourceType":"module"}