{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport database from '../firebase/firebase';\n\nconst setDataLoading = loading => ({\n  type: \"FETCH_DATA_LOADING\",\n  payload: loading\n});\n\nconst fetchDataSuccess = payload => ({\n  type: \"FETCH_DATA_SUCCESS\",\n  payload\n});\n\nconst fetchDataFailure = () => ({\n  type: \"FETCH_DATA_FAILURE\"\n});\n\nexport const setTextFilter = (text = '') => ({\n  type: 'SET_TEXT_FILTER',\n  text\n});\nexport const fetchData = () => {\n  return dispatch => {\n    dispatch(setDataLoading(true)); // <-- start loading\n\n    return database.ref('skillsPage').once('value').then(snapshot => {\n      const skillsPage = [];\n      snapshot.forEach(child => {\n        skillsPage.push(_objectSpread({}, child.val()));\n      });\n      const [languages, frameworks, services, tools, skillset, education] = skillsPage;\n      const educationArr = education.education.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      const [university, school] = educationArr;\n      const setLanguages = languages.languages;\n      const setFrameworks = frameworks.libraries_frameworks;\n      const setServices = services.services;\n      const setTools = tools.tools;\n      const setSkillset = skillset.skillset;\n      const searchList = [...setLanguages, ...setFrameworks, ...setServices, ...setTools, ...setSkillset];\n      const skillsKeys = skillsPage.map(item => {\n        return Object.keys(item);\n      }, []);\n      const [langKey, frameworksKey, servicesKey, toolsKey, skillsetKey] = skillsKeys;\n      const skillsValues = skillsPage.map(item => {\n        return Object.values(item);\n      }, []);\n      const skillsValuesArr = skillsValues.reduce((sum, item) => {\n        return sum.concat(item);\n      }, []);\n      const [languagesVals, frameworksVals, servicesVals, toolsVals, skillsetVals] = skillsValuesArr;\n      dispatch(fetchDataSuccess({\n        languages,\n        frameworks,\n        services,\n        tools,\n        skillset,\n        university,\n        school,\n        searchList,\n        langKey,\n        frameworksKey,\n        servicesKey,\n        toolsKey,\n        skillsetKey,\n        languagesVals,\n        frameworksVals,\n        servicesVals,\n        toolsVals,\n        skillsetVals\n      }));\n    }).catch(e => {\n      console.error('Error fetching data', e);\n      dispatch(fetchDataFailure());\n    }).finally(() => dispatch(setDataLoading(false))); // <-- complete loading\n  };\n};","map":null,"metadata":{},"sourceType":"module"}