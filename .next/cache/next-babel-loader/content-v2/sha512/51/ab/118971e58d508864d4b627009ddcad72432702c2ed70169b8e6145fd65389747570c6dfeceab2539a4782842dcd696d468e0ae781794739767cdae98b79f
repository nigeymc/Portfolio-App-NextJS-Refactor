{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { homepageReducer, myExperiencePageReducer, skillsReducer, githubDataReducer, projectsDataReducer } from \"../reducers/fetchDataReducer\";\nexport const reducers = combineReducers({\n  homepage: homepageReducer,\n  experiencePage: myExperiencePageReducer,\n  skillsPage: skillsReducer,\n  githubData: githubDataReducer,\n  projectsData: projectsDataReducer\n});\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst initStore = (preloadedState = initialState) => {\n  return createStore(reducer, preloadedState, composeWithDevTools(applyMiddleware()));\n};\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function configureStore(initialState = {}) {\n  // const persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : initialState;\n  const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(thunk)), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()); // store.subscribe(() => {\n  //     localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n  // });\n\n  return store;\n}\nexport const store = configureStore();","map":{"version":3,"sources":["/Users/niallmckenna/Dropbox/A-react-apps/nextjs-portfolio-app/store/configureStore.js"],"names":["useMemo","createStore","combineReducers","applyMiddleware","compose","thunk","homepageReducer","myExperiencePageReducer","skillsReducer","githubDataReducer","projectsDataReducer","reducers","homepage","experiencePage","skillsPage","githubData","projectsData","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","initStore","preloadedState","initialState","reducer","composeWithDevTools","initializeStore","_store","store","getState","undefined","configureStore","__REDUX_DEVTOOLS_EXTENSION__"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,eAAT,EAA0BC,uBAA1B,EAAmDC,aAAnD,EAAkEC,iBAAlE,EAAqFC,mBAArF,QAAgH,8BAAhH;AAEA,OAAO,MAAMC,QAAQ,GAAGT,eAAe,CAAC;AACtCU,EAAAA,QAAQ,EAAEN,eAD4B;AAEtCO,EAAAA,cAAc,EAAEN,uBAFsB;AAGtCO,EAAAA,UAAU,EAAEN,aAH0B;AAItCO,EAAAA,UAAU,EAAEN,iBAJ0B;AAKtCO,EAAAA,YAAY,EAAEN;AALwB,CAAD,CAAhC;AAQP,MAAMO,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+Cf,OAAxE;;AAEA,MAAMgB,SAAS,GAAG,CAACC,cAAc,GAAGC,YAAlB,KAAmC;AACnD,SAAOrB,WAAW,CAChBsB,OADgB,EAEhBF,cAFgB,EAGhBG,mBAAmB,CAACrB,eAAe,EAAhB,CAHH,CAAlB;AAKD,CAND;;AAQA,OAAO,MAAMsB,eAAe,GAAIJ,cAAD,IAAoB;AAAA;;AACjD,MAAIK,MAAM,cAAGC,KAAH,6CAAYP,SAAS,CAACC,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIM,KAAtB,EAA6B;AAC3BD,IAAAA,MAAM,GAAGN,SAAS,iCACbO,KAAK,CAACC,QAAN,EADa,GAEbP,cAFa,EAAlB,CAD2B,CAK3B;;AACAM,IAAAA,KAAK,GAAGE,SAAR;AACD,GAZgD,CAcjD;;;AACA,YAAmC,OAAOH,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACC,KAAL,EAAYA,KAAK,GAAGD,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASI,cAAT,CAAwBR,YAAY,GAAG,EAAvC,EAA2C;AAEhD;AAEA,QAAMK,KAAK,GAAG1B,WAAW,CAACU,QAAD,EAAWW,YAAX,EAAyBL,gBAAgB,CAACd,eAAe,CAACE,KAAD,CAAhB,CAAzC,EAAmEa,MAAM,CAACa,4BAAP,IAAuCb,MAAM,CAACa,4BAAP,EAA1G,CAAzB,CAJgD,CAMhD;AACA;AACA;;AAEA,SAAOJ,KAAP;AACD;AAID,OAAO,MAAMA,KAAK,GAAGG,cAAc,EAA5B","sourcesContent":["import { useMemo } from 'react';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { homepageReducer, myExperiencePageReducer, skillsReducer, githubDataReducer, projectsDataReducer } from \"../reducers/fetchDataReducer\";\n\nexport const reducers = combineReducers({\n  homepage: homepageReducer,\n  experiencePage: myExperiencePageReducer,\n  skillsPage: skillsReducer,\n  githubData: githubDataReducer,\n  projectsData: projectsDataReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst initStore = (preloadedState = initialState) => {\n  return createStore(\n    reducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware())\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    })\n    // Reset the current store\n    store = undefined\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return _store\n}\n\nexport function configureStore(initialState = {}) {\n\n  // const persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : initialState;\n\n  const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(thunk)), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n  // store.subscribe(() => {\n  //     localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n  // });\n\n  return store;\n}\n\n\n\nexport const store = configureStore();\n"]},"metadata":{},"sourceType":"module"}