{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nconst GithubProjects = props => {\n  // const dispatch = useDispatch();\n  // const {\n  //     error,\n  //     loading,\n  //     expensify,\n  //     portfolio,\n  //     hooks\n  // } = useSelector(state => state.githubData);\n  const {\n    0: portfolio,\n    1: setPortfolio\n  } = useState({});\n  const {\n    0: expensify,\n    1: setExpensify\n  } = useState({});\n  const {\n    0: hooks,\n    1: setHooks\n  } = useState({});\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/nigeymc/repos\", {\n      headers: {\n        'Accept': 'application/vnd.github.v3+json'\n      }\n    }).then(response => response.json()) //Converting the response to a JSON object\n    .then(data => {\n      const repos = Object.entries(data);\n      const arr = repos.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      const filteredReposArr = arr.filter((item, key) => {\n        if (typeof item !== \"string\") {\n          return item;\n        }\n      }, []);\n      const [, endNav, expensify, portfolio,, hooks] = filteredReposArr;\n      setPortfolio({\n        portfolio\n      });\n      setExpensify({\n        expensify\n      });\n      setHooks({\n        hooks\n      });\n    }).catch(e => {\n      console.error('Error fetching data', e);\n      setError(true); // will be passed to the page component as props\n    }).finally(() => {\n      setLoading(false); // will be passed to the page component as props\n    }); // <-- complete loading\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProjectCard, {\n      thumbnail: props.portfolioThumbnail,\n      title: portfolio.name,\n      description: portfolio.description,\n      pageUrl: portfolio.url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n      thumbnail: props.expensifyThumbnail,\n      title: expensify.name,\n      description: expensify.description,\n      pageUrl: expensify.url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n      thumbnail: props.newFeaturesThumbnail,\n      title: hooks.name,\n      description: hooks.description,\n      pageUrl: hooks.url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\nexport { GithubProjects as default };","map":{"version":3,"sources":["/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js"],"names":["React","Fragment","useState","useEffect","Alert","LoadingSpinner","ProjectCard","useSelector","useDispatch","fetchData","GithubProjects","props","portfolio","setPortfolio","expensify","setExpensify","hooks","setHooks","error","setError","loading","setLoading","fetch","headers","then","response","json","data","repos","Object","entries","arr","reduce","total","amount","concat","filteredReposArr","filter","item","key","endNav","catch","e","console","finally","portfolioThumbnail","name","description","url","expensifyThumbnail","newFeaturesThumbnail","default"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nconst GithubProjects = (props) => {\n\n    // const dispatch = useDispatch();\n\n    // const {\n    //     error,\n    //     loading,\n    //     expensify,\n    //     portfolio,\n    //     hooks\n    // } = useSelector(state => state.githubData);\n\n    const [portfolio, setPortfolio] = useState({});\n    const [expensify, setExpensify] = useState({});\n    const [hooks, setHooks] = useState({});\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetch(\"https://api.github.com/users/nigeymc/repos\", {\n            headers: {\n                'Accept': 'application/vnd.github.v3+json'\n            }\n        })\n            .then(response => response.json()) //Converting the response to a JSON object\n            .then(data => {\n\n                const repos = Object.entries(data);\n\n                const arr = repos.reduce((total, amount) => {\n                    return total.concat(amount);\n                }, []);\n\n                const filteredReposArr = arr.filter((item, key) => {\n                    if (typeof item !== \"string\") {\n                        return item;\n                    }\n                }, []);\n\n                const [, endNav, expensify, portfolio, , hooks] = filteredReposArr;\n\n                setPortfolio({ portfolio });\n                setExpensify({ expensify });\n                setHooks({ hooks });\n\n            })\n            .catch((e) => {\n                console.error('Error fetching data', e);\n                setError(true); // will be passed to the page component as props\n            })\n            .finally(() => {\n                setLoading(false); // will be passed to the page component as props\n            }); // <-- complete loading\n    }, []);\n\n    return (\n        <Fragment>\n            <ProjectCard thumbnail={props.portfolioThumbnail} title={portfolio.name} description={portfolio.description} pageUrl={portfolio.url} />\n            <ProjectCard thumbnail={props.expensifyThumbnail} title={expensify.name} description={expensify.description} pageUrl={expensify.url} />\n            <ProjectCard thumbnail={props.newFeaturesThumbnail} title={hooks.name} description={hooks.description} pageUrl={hooks.url} />\n        </Fragment>\n    )\n}\n\nexport { GithubProjects as default };"]},"metadata":{},"sourceType":"module"}