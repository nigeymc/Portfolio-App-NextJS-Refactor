{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nconst GithubProjects = props => {\n  const dispatch = useDispatch();\n  const {\n    error,\n    loading,\n    expensify,\n    portfolio,\n    hooks\n  } = useSelector(state => state.githubData);\n  useEffect(() => {\n    const fetchData = () => {\n      return dispatch => {\n        dispatch(setDataLoading(true)); // <-- start loading\n\n        return fetch(githubRepos, {\n          headers: {\n            'Accept': 'application/vnd.github.v3+json'\n          }\n        }).then(response => response.json()) //Converting the response to a JSON object\n        .then(data => {\n          const repos = Object.entries(data);\n          const arr = repos.reduce((total, amount) => {\n            return total.concat(amount);\n          }, []);\n          const filteredReposArr = arr.filter((item, key) => {\n            if (typeof item !== \"string\") {\n              return item;\n            }\n          }, []);\n          const [, endNav, expensify, portfolio,, hooks] = filteredReposArr;\n          return {\n            props: {\n              filteredReposArr,\n              endNav,\n              expensify,\n              portfolio,\n              hooks\n            } // will be passed to the page component as props\n\n          };\n        }).catch(e => {\n          console.error('Error fetching data', e);\n          return {\n            props: {\n              error: true\n            } // will be passed to the page component as props\n\n          };\n        }).finally(() => {\n          return {\n            props: {\n              loading: false\n            } // will be passed to the page component as props\n\n          };\n        }); // <-- complete loading\n      };\n    }; // dispatch(fetchData());\n\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"alert__error--fetch\",\n      variant: \"info\",\n      children: \"Error fetching page content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 26\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.portfolioThumbnail,\n        title: portfolio.name,\n        description: portfolio.description,\n        pageUrl: portfolio.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.expensifyThumbnail,\n        title: expensify.name,\n        description: expensify.description,\n        pageUrl: expensify.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.newFeaturesThumbnail,\n        title: hooks.name,\n        description: hooks.description,\n        pageUrl: hooks.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\nexport { GithubProjects as default };","map":{"version":3,"sources":["/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js"],"names":["React","Fragment","useEffect","Alert","LoadingSpinner","ProjectCard","useSelector","useDispatch","fetchData","GithubProjects","props","dispatch","error","loading","expensify","portfolio","hooks","state","githubData","setDataLoading","fetch","githubRepos","headers","then","response","json","data","repos","Object","entries","arr","reduce","total","amount","concat","filteredReposArr","filter","item","key","endNav","catch","e","console","finally","portfolioThumbnail","name","description","url","expensifyThumbnail","newFeaturesThumbnail","default"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nconst GithubProjects = (props) => {\n\n    const dispatch = useDispatch();\n\n    const {\n        error,\n        loading,\n        expensify,\n        portfolio,\n        hooks\n    } = useSelector(state => state.githubData);\n\n    useEffect(() => {\n        const fetchData = () => {\n            return (dispatch) => {\n                dispatch(setDataLoading(true)); // <-- start loading\n                return fetch(githubRepos, {\n                    headers: {\n                        'Accept': 'application/vnd.github.v3+json'\n                    }\n                })\n                    .then(response => response.json()) //Converting the response to a JSON object\n                    .then(data => {\n\n                        const repos = Object.entries(data);\n\n                        const arr = repos.reduce((total, amount) => {\n                            return total.concat(amount);\n                        }, []);\n\n                        const filteredReposArr = arr.filter((item, key) => {\n                            if (typeof item !== \"string\") {\n                                return item;\n                            }\n                        }, []);\n\n                        const [, endNav, expensify, portfolio, , hooks] = filteredReposArr;\n\n                        return {\n                            props: { filteredReposArr, endNav, expensify, portfolio, hooks }, // will be passed to the page component as props\n                        };\n\n                    })\n                    .catch((e) => {\n                        console.error('Error fetching data', e);\n                        return {\n                            props: { error: true }, // will be passed to the page component as props\n                        };\n                    })\n                    .finally(() => {\n                        return {\n                            props: { loading: false }, // will be passed to the page component as props\n                        };\n                    }); // <-- complete loading\n            };\n        };\n        // dispatch(fetchData());\n    }, []);\n\n    return (\n        <Fragment>\n            {\n                error && <Alert className=\"alert__error--fetch\" variant=\"info\">Error fetching page content</Alert>\n            }\n            {\n                loading ? (\n                    <LoadingSpinner />\n                ) : (\n                    <Fragment>\n                        <ProjectCard thumbnail={props.portfolioThumbnail} title={portfolio.name} description={portfolio.description} pageUrl={portfolio.url} />\n                        <ProjectCard thumbnail={props.expensifyThumbnail} title={expensify.name} description={expensify.description} pageUrl={expensify.url} />\n                        <ProjectCard thumbnail={props.newFeaturesThumbnail} title={hooks.name} description={hooks.description} pageUrl={hooks.url} />\n                    </Fragment>\n                )\n            }\n        </Fragment>\n    )\n}\n\nexport { GithubProjects as default };"]},"metadata":{},"sourceType":"module"}