{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport database from '../firebase/firebase';\n\nconst setDataLoading = loading => ({\n  type: \"FETCH_DATA_LOADING\",\n  payload: loading\n});\n\nconst fetchDataSuccess = payload => ({\n  type: \"FETCH_DATA_SUCCESS\",\n  payload // { firstName, lastName }\n\n});\n\nconst fetchDataFailure = () => ({\n  type: \"FETCH_DATA_FAILURE\"\n});\n\nexport const fetchData = () => {\n  return dispatch => {\n    dispatch(setDataLoading(true)); // <-- start loading\n\n    return database.ref('employment').once('value').then(snapshot => {\n      const employment = [];\n      snapshot.forEach(child => {\n        employment.push(_objectSpread({}, child.val()));\n      });\n      const [riverIsland, stellaDot, nap, jet2] = employment;\n      const riSummary = riverIsland.summary.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      const sdSummary = stellaDot.summary.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      const napSummary = nap.summary.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      const jet2Summary = jet2.summary.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      dispatch(fetchDataSuccess({\n        employment,\n        riverIsland,\n        riSummary,\n        stellaDot,\n        sdSummary,\n        nap,\n        napSummary,\n        jet2,\n        jet2Summary\n      }));\n    }).catch(e => {\n      console.error('Error fetching data', e);\n      dispatch(fetchDataFailure());\n    }).finally(() => dispatch(setDataLoading(false))); // <-- complete loading\n  };\n};","map":null,"metadata":{},"sourceType":"module"}