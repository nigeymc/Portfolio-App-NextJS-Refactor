{"ast":null,"code":"import _defineProperty from \"/Users/niallmckenna/Dropbox/A-react-apps/nextjs-portfolio-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { homepageReducer, myExperiencePageReducer, skillsReducer, githubDataReducer, projectsDataReducer } from \"../reducers/fetchDataReducer\";\nexport var reducers = combineReducers({\n  homepage: homepageReducer,\n  experiencePage: myExperiencePageReducer,\n  skillsPage: skillsReducer,\n  githubData: githubDataReducer,\n  projectsData: projectsDataReducer\n});\nvar composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // store.js\n\nvar storeInstance;\nexport var makeStore = function makeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  storeInstance = createStore(Reducers, initialState, composeEnhancers(applyMiddleware(thunk)), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n  return storeInstance;\n}; // initializeStore used for pages that need access to store at getServerSideProps\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _storeInstance;\n\n  var reInitiatedStore = (_storeInstance = storeInstance) !== null && _storeInstance !== void 0 ? _storeInstance : makeStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n  if (preloadedState && storeInstance) {\n    reInitiatedStore = makeStore(_objectSpread(_objectSpread({}, storeInstance.getState()), preloadedState)); // Reset the current store\n\n    storeInstance = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) {\n    return reInitiatedStore;\n  } // Create the store once in the client\n\n\n  if (!storeInstance) {\n    storeInstance = reInitiatedStore;\n  }\n\n  return reInitiatedStore;\n};\nexport var store = initializeStore(pageProps.initialReduxState); // export function configureStore(initialState = {}) {\n//   // const persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : initialState;\n//   const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(thunk)), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n//   // store.subscribe(() => {\n//   //     localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n//   // });\n//   return store;\n// }\n// export const store = configureStore();","map":{"version":3,"sources":["/Users/niallmckenna/Dropbox/A-react-apps/nextjs-portfolio-app/store/configureStore.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","homepageReducer","myExperiencePageReducer","skillsReducer","githubDataReducer","projectsDataReducer","reducers","homepage","experiencePage","skillsPage","githubData","projectsData","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","storeInstance","makeStore","initialState","Reducers","__REDUX_DEVTOOLS_EXTENSION__","initializeStore","preloadedState","reInitiatedStore","getState","undefined","store","pageProps","initialReduxState"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,eAAT,EAA0BC,uBAA1B,EAAmDC,aAAnD,EAAkEC,iBAAlE,EAAqFC,mBAArF,QAAgH,8BAAhH;AAEA,OAAO,IAAMC,QAAQ,GAAGT,eAAe,CAAC;AACtCU,EAAAA,QAAQ,EAAEN,eAD4B;AAEtCO,EAAAA,cAAc,EAAEN,uBAFsB;AAGtCO,EAAAA,UAAU,EAAEN,aAH0B;AAItCO,EAAAA,UAAU,EAAEN,iBAJ0B;AAKtCO,EAAAA,YAAY,EAAEN;AALwB,CAAD,CAAhC;AAQP,IAAMO,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+Cf,OAAxE,C,CAEA;;AAEA,IAAIgB,aAAJ;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AAC9CF,EAAAA,aAAa,GAAGnB,WAAW,CACzBsB,QADyB,EAEzBD,YAFyB,EAGzBL,gBAAgB,CAACd,eAAe,CAACE,KAAD,CAAhB,CAHS,EAGiBa,MAAM,CAACM,4BAAP,IAAuCN,MAAM,CAACM,4BAAP,EAHxD,CAA3B;AAKA,SAAOJ,aAAP;AACD,CAPM,C,CASP;;AACA,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,cAAD,EAAoB;AAAA;;AACjD,MAAIC,gBAAgB,qBAAGP,aAAH,2DAAoBC,SAAS,CAACK,cAAD,CAAjD,CADiD,CAGjD;AACA;;AACA,MAAIA,cAAc,IAAIN,aAAtB,EAAqC;AACnCO,IAAAA,gBAAgB,GAAGN,SAAS,iCAAMD,aAAa,CAACQ,QAAd,EAAN,GAAmCF,cAAnC,EAA5B,CADmC,CAEnC;;AACAN,IAAAA,aAAa,GAAGS,SAAhB;AACD,GATgD,CAWjD;;;AACA,aAAqC;AACnC,WAAOF,gBAAP;AACD,GAdgD,CAgBjD;;;AACA,MAAI,CAACP,aAAL,EAAoB;AAClBA,IAAAA,aAAa,GAAGO,gBAAhB;AACD;;AAED,SAAOA,gBAAP;AACD,CAtBM;AAwBP,OAAO,IAAMG,KAAK,GAAGL,eAAe,CAACM,SAAS,CAACC,iBAAX,CAA7B,C,CAEP;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { homepageReducer, myExperiencePageReducer, skillsReducer, githubDataReducer, projectsDataReducer } from \"../reducers/fetchDataReducer\";\n\nexport const reducers = combineReducers({\n  homepage: homepageReducer,\n  experiencePage: myExperiencePageReducer,\n  skillsPage: skillsReducer,\n  githubData: githubDataReducer,\n  projectsData: projectsDataReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// store.js\n\nlet storeInstance;\nexport const makeStore = (initialState = {}) => {\n  storeInstance = createStore(\n    Reducers,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk)), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  return storeInstance;\n};\n\n// initializeStore used for pages that need access to store at getServerSideProps\nexport const initializeStore = (preloadedState) => {\n  let reInitiatedStore = storeInstance ?? makeStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && storeInstance) {\n    reInitiatedStore = makeStore({ ...storeInstance.getState(), ...preloadedState });\n    // Reset the current store\n    storeInstance = undefined;\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof (window) === 'undefined') {\n    return reInitiatedStore;\n  }\n\n  // Create the store once in the client\n  if (!storeInstance) {\n    storeInstance = reInitiatedStore;\n  }\n\n  return reInitiatedStore;\n}\n\nexport const store = initializeStore(pageProps.initialReduxState);\n\n// export function configureStore(initialState = {}) {\n\n//   // const persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : initialState;\n\n//   const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(thunk)), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n//   // store.subscribe(() => {\n//   //     localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n//   // });\n\n//   return store;\n// }\n\n// export const store = configureStore();\n"]},"metadata":{},"sourceType":"module"}