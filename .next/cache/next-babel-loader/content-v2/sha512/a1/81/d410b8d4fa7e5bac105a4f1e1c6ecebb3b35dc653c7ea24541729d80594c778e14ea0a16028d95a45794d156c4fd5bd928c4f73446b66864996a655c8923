{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nvar GithubProjects = function GithubProjects(props) {\n  _s();\n\n  // const dispatch = useDispatch();\n  // const {\n  //     error,\n  //     loading,\n  //     expensify,\n  //     portfolio,\n  //     hooks\n  // } = useSelector(state => state.githubData);\n  var _useState = useState({}),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState({}),\n      expensify = _useState2[0],\n      setExpensify = _useState2[1];\n\n  var _useState3 = useState({}),\n      hooks = _useState3[0],\n      sethooks = _useState3[1];\n\n  useEffect(function () {\n    fetch(\"https://api.github.com/users/nigeymc/repos\", {\n      headers: {\n        'Accept': 'application/vnd.github.v3+json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }) //Converting the response to a JSON object\n    .then(function (data) {\n      var repos = Object.entries(data);\n      var arr = repos.reduce(function (total, amount) {\n        return total.concat(amount);\n      }, []);\n      var filteredReposArr = arr.filter(function (item, key) {\n        if (typeof item !== \"string\") {\n          return item;\n        }\n      }, []);\n\n      var _filteredReposArr = _slicedToArray(filteredReposArr, 6),\n          endNav = _filteredReposArr[1],\n          expensify = _filteredReposArr[2],\n          portfolio = _filteredReposArr[3],\n          hooks = _filteredReposArr[5];\n\n      setData({\n        portfolio: portfolio,\n        expensify: expensify,\n        hooks: hooks\n      }); // will be passed to the page component as props\n    })[\"catch\"](function (e) {\n      console.error('Error fetching data', e);\n      setData({\n        error: true\n      }); // will be passed to the page component as props\n    })[\"finally\"](function () {\n      setData({\n        loading: false\n      }); // will be passed to the page component as props\n    }); // <-- complete loading\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [data.error && /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"alert__error--fetch\",\n      variant: \"info\",\n      children: \"Error fetching page content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 31\n    }, _this), data.loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }, _this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.portfolioThumbnail,\n        title: portfolio.name,\n        description: portfolio.description,\n        pageUrl: portfolio.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, _this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.expensifyThumbnail,\n        title: expensify.name,\n        description: expensify.description,\n        pageUrl: expensify.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, _this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.newFeaturesThumbnail,\n        title: hooks.name,\n        description: hooks.description,\n        pageUrl: hooks.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(GithubProjects, \"BOctKp63ODawiJk8GBxezpiAg5g=\");\n\n_c = GithubProjects;\nexport { GithubProjects as default };\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProjects\");","map":{"version":3,"sources":["/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js"],"names":["React","Fragment","useState","useEffect","Alert","LoadingSpinner","ProjectCard","useSelector","useDispatch","fetchData","GithubProjects","props","data","setData","expensify","setExpensify","hooks","sethooks","fetch","headers","then","response","json","repos","Object","entries","arr","reduce","total","amount","concat","filteredReposArr","filter","item","key","endNav","portfolio","e","console","error","loading","portfolioThumbnail","name","description","url","expensifyThumbnail","newFeaturesThumbnail","default"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nconst GithubProjects = (props) => {\n\n    // const dispatch = useDispatch();\n\n    // const {\n    //     error,\n    //     loading,\n    //     expensify,\n    //     portfolio,\n    //     hooks\n    // } = useSelector(state => state.githubData);\n\n    const [data, setData] = useState({});\n    const [expensify, setExpensify] = useState({});\n    const [hooks, sethooks] = useState({});\n\n    useEffect(() => {\n        fetch(\"https://api.github.com/users/nigeymc/repos\", {\n            headers: {\n                'Accept': 'application/vnd.github.v3+json'\n            }\n        })\n            .then(response => response.json()) //Converting the response to a JSON object\n            .then(data => {\n\n                const repos = Object.entries(data);\n\n                const arr = repos.reduce((total, amount) => {\n                    return total.concat(amount);\n                }, []);\n\n                const filteredReposArr = arr.filter((item, key) => {\n                    if (typeof item !== \"string\") {\n                        return item;\n                    }\n                }, []);\n\n                const [, endNav, expensify, portfolio, , hooks] = filteredReposArr;\n\n                setData({ portfolio, expensify, hooks }); // will be passed to the page component as props\n\n            })\n            .catch((e) => {\n                console.error('Error fetching data', e);\n                setData({ error: true }); // will be passed to the page component as props\n            })\n            .finally(() => {\n                setData({ loading: false }); // will be passed to the page component as props\n            }); // <-- complete loading\n    }, []);\n\n    return (\n        <Fragment>\n            {\n                data.error && <Alert className=\"alert__error--fetch\" variant=\"info\">Error fetching page content</Alert>\n            }\n            {\n                data.loading ? (\n                    <LoadingSpinner />\n                ) : (\n                    <Fragment>\n                        <ProjectCard thumbnail={props.portfolioThumbnail} title={portfolio.name} description={portfolio.description} pageUrl={portfolio.url} />\n                        <ProjectCard thumbnail={props.expensifyThumbnail} title={expensify.name} description={expensify.description} pageUrl={expensify.url} />\n                        <ProjectCard thumbnail={props.newFeaturesThumbnail} title={hooks.name} description={hooks.description} pageUrl={hooks.url} />\n                    </Fragment>\n                )\n            }\n        </Fragment>\n    )\n}\n\nexport { GithubProjects as default };"]},"metadata":{},"sourceType":"module"}