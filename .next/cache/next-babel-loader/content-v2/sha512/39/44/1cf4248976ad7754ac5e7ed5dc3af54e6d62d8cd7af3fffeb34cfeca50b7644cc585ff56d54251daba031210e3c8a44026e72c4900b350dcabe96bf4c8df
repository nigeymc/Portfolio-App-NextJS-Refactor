{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nconst GithubProjects = props => {\n  // const dispatch = useDispatch();\n  // const {\n  //     error,\n  //     loading,\n  //     expensify,\n  //     portfolio,\n  //     hooks\n  // } = useSelector(state => state.githubData);\n  const {\n    0: portfolio,\n    1: setPortfolio\n  } = useState({});\n  const {\n    0: expensify,\n    1: setExpensify\n  } = useState({});\n  const {\n    0: hooks,\n    1: sethooks\n  } = useState({});\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/nigeymc/repos\", {\n      headers: {\n        'Accept': 'application/vnd.github.v3+json'\n      }\n    }).then(response => response.json()) //Converting the response to a JSON object\n    .then(data => {\n      const repos = Object.entries(data);\n      const arr = repos.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      const filteredReposArr = arr.filter((item, key) => {\n        if (typeof item !== \"string\") {\n          return item;\n        }\n      }, []);\n      const [, endNav, expensify, portfolio,, hooks] = filteredReposArr;\n      return {\n        props: {\n          portfolio,\n          expensify,\n          hooks\n        } // will be passed to the page component as props\n\n      };\n    }).catch(e => {\n      console.error('Error fetching data', e);\n      return {\n        props: {\n          error: true\n        } // will be passed to the page component as props\n\n      };\n    }).finally(() => {\n      return {\n        props: {\n          loading: false\n        } // will be passed to the page component as props\n\n      };\n    }); // <-- complete loading\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"alert__error--fetch\",\n      variant: \"info\",\n      children: \"Error fetching page content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 26\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.portfolioThumbnail,\n        title: portfolio.name,\n        description: portfolio.description,\n        pageUrl: portfolio.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.expensifyThumbnail,\n        title: expensify.name,\n        description: expensify.description,\n        pageUrl: expensify.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n        thumbnail: props.newFeaturesThumbnail,\n        title: hooks.name,\n        description: hooks.description,\n        pageUrl: hooks.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\nexport { GithubProjects as default };","map":{"version":3,"sources":["/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/components/GithubProjectsComponent.js"],"names":["React","Fragment","useState","useEffect","Alert","LoadingSpinner","ProjectCard","useSelector","useDispatch","fetchData","GithubProjects","props","portfolio","setPortfolio","expensify","setExpensify","hooks","sethooks","fetch","headers","then","response","json","data","repos","Object","entries","arr","reduce","total","amount","concat","filteredReposArr","filter","item","key","endNav","catch","e","console","error","finally","loading","portfolioThumbnail","name","description","url","expensifyThumbnail","newFeaturesThumbnail","default"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport ProjectCard from \"./ProjectCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../actions/fetchGithubDataAction\";\n\nconst GithubProjects = (props) => {\n\n    // const dispatch = useDispatch();\n\n    // const {\n    //     error,\n    //     loading,\n    //     expensify,\n    //     portfolio,\n    //     hooks\n    // } = useSelector(state => state.githubData);\n\n    const [portfolio, setPortfolio] = useState({});\n    const [expensify, setExpensify] = useState({});\n    const [hooks, sethooks] = useState({});\n\n\n\n\n    useEffect(() => {\n        fetch(\"https://api.github.com/users/nigeymc/repos\", {\n            headers: {\n                'Accept': 'application/vnd.github.v3+json'\n            }\n        })\n            .then(response => response.json()) //Converting the response to a JSON object\n            .then(data => {\n\n                const repos = Object.entries(data);\n\n                const arr = repos.reduce((total, amount) => {\n                    return total.concat(amount);\n                }, []);\n\n                const filteredReposArr = arr.filter((item, key) => {\n                    if (typeof item !== \"string\") {\n                        return item;\n                    }\n                }, []);\n\n                const [, endNav, expensify, portfolio, , hooks] = filteredReposArr;\n\n                return {\n                    props: { portfolio, expensify, hooks }, // will be passed to the page component as props\n                };\n\n            })\n            .catch((e) => {\n                console.error('Error fetching data', e);\n                return {\n                    props: { error: true }, // will be passed to the page component as props\n                };\n            })\n            .finally(() => {\n                return {\n                    props: { loading: false }, // will be passed to the page component as props\n                };\n            }); // <-- complete loading\n    }, []);\n\n    return (\n        <Fragment>\n            {\n                error && <Alert className=\"alert__error--fetch\" variant=\"info\">Error fetching page content</Alert>\n            }\n            {\n                loading ? (\n                    <LoadingSpinner />\n                ) : (\n                    <Fragment>\n                        <ProjectCard thumbnail={props.portfolioThumbnail} title={portfolio.name} description={portfolio.description} pageUrl={portfolio.url} />\n                        <ProjectCard thumbnail={props.expensifyThumbnail} title={expensify.name} description={expensify.description} pageUrl={expensify.url} />\n                        <ProjectCard thumbnail={props.newFeaturesThumbnail} title={hooks.name} description={hooks.description} pageUrl={hooks.url} />\n                    </Fragment>\n                )\n            }\n        </Fragment>\n    )\n}\n\nexport { GithubProjects as default };"]},"metadata":{},"sourceType":"module"}