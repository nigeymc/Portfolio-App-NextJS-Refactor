{"ast":null,"code":"const githubRepos = \"https://api.github.com/users/nigeymc/repos\";\n\nconst setDataLoading = loading => ({\n  type: \"FETCH_DATA_LOADING\",\n  payload: loading\n});\n\nconst fetchDataSuccess = payload => ({\n  type: \"FETCH_DATA_SUCCESS\",\n  payload\n});\n\nconst fetchDataFailure = () => ({\n  type: \"FETCH_DATA_FAILURE\"\n});\n\nexport const fetchData = () => {\n  return dispatch => {\n    dispatch(setDataLoading(true)); // <-- start loading\n\n    return fetch(githubRepos, {\n      headers: {\n        'Accept': 'application/vnd.github.v3+json'\n      }\n    }).then(response => response.json()) //Converting the response to a JSON object\n    .then(data => {\n      const repos = Object.entries(data);\n      const arr = repos.reduce((total, amount) => {\n        return total.concat(amount);\n      }, []);\n      const filteredReposArr = arr.filter((item, key) => {\n        if (typeof item !== \"string\") {\n          return item;\n        }\n      }, []);\n      const [, endNav, expensify, portfolio, next,, hooks] = filteredReposArr;\n      dispatch(fetchDataSuccess({\n        filteredReposArr,\n        endNav,\n        expensify,\n        portfolio,\n        next,\n        hooks\n      }));\n    }).catch(e => {\n      console.error('Error fetching data', e);\n      dispatch(fetchDataFailure());\n    }).finally(() => dispatch(setDataLoading(false))); // <-- complete loading\n  };\n};","map":{"version":3,"sources":["/Users/niallmckenna/Dropbox/A-react-apps/portfolio-app-nextjs/actions/fetchGithubDataAction.js"],"names":["githubRepos","setDataLoading","loading","type","payload","fetchDataSuccess","fetchDataFailure","fetchData","dispatch","fetch","headers","then","response","json","data","repos","Object","entries","arr","reduce","total","amount","concat","filteredReposArr","filter","item","key","endNav","expensify","portfolio","next","hooks","catch","e","console","error","finally"],"mappings":"AAAA,MAAMA,WAAW,GAAG,4CAApB;;AAEA,MAAMC,cAAc,GAAGC,OAAO,KAAK;AAC/BC,EAAAA,IAAI,EAAE,oBADyB;AAE/BC,EAAAA,OAAO,EAAEF;AAFsB,CAAL,CAA9B;;AAKA,MAAMG,gBAAgB,GAAGD,OAAO,KAAK;AACjCD,EAAAA,IAAI,EAAE,oBAD2B;AAEjCC,EAAAA;AAFiC,CAAL,CAAhC;;AAKA,MAAME,gBAAgB,GAAG,OAAO;AAC5BH,EAAAA,IAAI,EAAE;AADsB,CAAP,CAAzB;;AAIA,OAAO,MAAMI,SAAS,GAAG,MAAM;AAC3B,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACP,cAAc,CAAC,IAAD,CAAf,CAAR,CADiB,CACe;;AAChC,WAAOQ,KAAK,CAACT,WAAD,EAAc;AACtBU,MAAAA,OAAO,EAAE;AACL,kBAAU;AADL;AADa,KAAd,CAAL,CAKFC,IALE,CAKGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALf,EAKgC;AALhC,KAMFF,IANE,CAMGG,IAAI,IAAI;AAEV,YAAMC,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeH,IAAf,CAAd;AAEA,YAAMI,GAAG,GAAGH,KAAK,CAACI,MAAN,CAAa,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,eAAOD,KAAK,CAACE,MAAN,CAAaD,MAAb,CAAP;AACH,OAFW,EAET,EAFS,CAAZ;AAIA,YAAME,gBAAgB,GAAGL,GAAG,CAACM,MAAJ,CAAW,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC/C,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,iBAAOA,IAAP;AACH;AACJ,OAJwB,EAItB,EAJsB,CAAzB;AAMA,YAAM,GAAGE,MAAH,EAAWC,SAAX,EAAsBC,SAAtB,EAAiCC,IAAjC,GAAyCC,KAAzC,IAAkDR,gBAAxD;AAEAf,MAAAA,QAAQ,CAACH,gBAAgB,CAAC;AAAEkB,QAAAA,gBAAF;AAAoBI,QAAAA,MAApB;AAA4BC,QAAAA,SAA5B;AAAuCC,QAAAA,SAAvC;AAAkDC,QAAAA,IAAlD;AAAwDC,QAAAA;AAAxD,OAAD,CAAjB,CAAR;AACH,KAvBE,EAwBFC,KAxBE,CAwBKC,CAAD,IAAO;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCF,CAArC;AACAzB,MAAAA,QAAQ,CAACF,gBAAgB,EAAjB,CAAR;AACH,KA3BE,EA4BF8B,OA5BE,CA4BM,MAAM5B,QAAQ,CAACP,cAAc,CAAC,KAAD,CAAf,CA5BpB,CAAP,CAFiB,CA8BoC;AACxD,GA/BD;AAgCH,CAjCM","sourcesContent":["const githubRepos = \"https://api.github.com/users/nigeymc/repos\";\n\nconst setDataLoading = loading => ({\n    type: \"FETCH_DATA_LOADING\",\n    payload: loading,\n});\n\nconst fetchDataSuccess = payload => ({\n    type: \"FETCH_DATA_SUCCESS\",\n    payload,\n});\n\nconst fetchDataFailure = () => ({\n    type: \"FETCH_DATA_FAILURE\"\n});\n\nexport const fetchData = () => {\n    return (dispatch) => {\n        dispatch(setDataLoading(true)); // <-- start loading\n        return fetch(githubRepos, {\n            headers: {\n                'Accept': 'application/vnd.github.v3+json'\n            }\n        })\n            .then(response => response.json()) //Converting the response to a JSON object\n            .then(data => {\n\n                const repos = Object.entries(data);\n\n                const arr = repos.reduce((total, amount) => {\n                    return total.concat(amount);\n                }, []);\n\n                const filteredReposArr = arr.filter((item, key) => {\n                    if (typeof item !== \"string\") {\n                        return item;\n                    }\n                }, []);\n\n                const [, endNav, expensify, portfolio, next, , hooks] = filteredReposArr;\n\n                dispatch(fetchDataSuccess({ filteredReposArr, endNav, expensify, portfolio, next, hooks }));\n            })\n            .catch((e) => {\n                console.error('Error fetching data', e);\n                dispatch(fetchDataFailure());\n            })\n            .finally(() => dispatch(setDataLoading(false))); // <-- complete loading\n    };\n};\n\n\n"]},"metadata":{},"sourceType":"module"}